# System authorization information
auth  --useshadow --passalgo=sha512
# System bootloader configuration
#bootloader --location=mbr
# Clear the Master Boot Record
zerombr
# Partition clearing information
clearpart --all --initlabel --drives=sda
# Use text mode install
text
# Firewall configuration
firewall --enabled --ssh  --trust=eth0
# Run the Setup Agent on first boot
firstboot --disable
# System keyboard
keyboard us
# System language
lang en_US
# Installation logging level
logging --level=info
# Use network installation
cdrom
#url --url=http://tfrhelrepo.centralus.cloudapp.azure.com/rhel-7-server-rpms
# Network information
network --bootproto=dhcp --device=eth0 --onboot=on
# Reboot after installation
reboot
#Root password
rootpw --iscrypted $1$b2bDwXkz$ZpKi4Jx7tox779nrUdt8h1
user --groups=wheel --name=tfsupport --password=$6$G/P1TGIsGMWZ9aak$Sm/HZ1fcdfdmTdy4k2BTMv9Sw.mQOhrgtvMD5e8oo7t3uCtX2T005e/afw46a6TkODKkP8b9SrUgSAnjKxxfi1 --iscrypted --gecos="tfsupport"
# SELinux configuration
selinux --permissive
# Do not configure the X Window System
skipx
# System timezone
timezone  America/Chicago
# Install OS instead of upgrade
install
# Disk partitioning information
  clearpart --all --initlabel --drives=sda
  bootloader --location=mbr --driveorder=sda --append=net.ifnames=0 video=640x480
part /boot/efi --ondisk=sda --asprimary --fstype=efi --size=200
  part / --ondisk=sda --asprimary --fstype=xfs --size=30000
  part /usr2 --ondisk=sda --asprimary --fstype=xfs --size=100 --grow
  part swap    --ondisk=sda --asprimary --recommended
%packages
@Base
java
samba
cups
minicom
elinks
telnet
mc
glibc
mutt
samba-client
slang
curl
sendmail
glibc.i686
strace
dvd+rw-tools
dialog
firstboot
mtools
cdrecord
fetchmail
net-snmp
vlock
sysstat
ntp
procps
e2fsprogs
audit
expect
ksh
nmap
uuid
libuuid
screen
dos2unix
unix2dos
yum-presto
ncurses-term
boost
biosdevname
iptables-services
perl-Digest
perl-Digest-MD5
-chrony
ntp
NetworkManager

%end

%pre 
DEVICE=""

find_passport ()
{
	passport_device=""

	dev_names=(sda sdb sdc sdd sde)

	for thisdev in ${dev_names[@]}
	do

		# WD (Western Digital) is the vendor
		found=0
		vendor_file="/sys/block/$thisdev/device/vendor"
		if [ -f $vendor_file ]
		then
			exec < $vendor_file
			while read line
			do
				if [[ $line =~ "WD" ]]
				then
					found=1
					break
				fi
			done
		fi
		if [ $found -eq 0 ]
		then
			continue
		fi

		# ... AND Model is correct.
		# Note it is important to look at the model. Some shops
		# could have internal Western digital HDDs. If we were
		# to only look for "WD" drive, and not look for this particular
		# model, then, we could inadvertently use the "real" device
		# as the "backup" device, which would be catastrophic.

		model_file="/sys/block/$thisdev/device/model"
		if [ -f $model_file ]
		then
			exec < $model_file
			while read line
			do
				if [[ $line =~ "My Passport" ]]
				then
					found=1
					break
				fi
			done
		fi
		if [ $found -eq 0 ]
		then
			continue
		fi

		# found a match
		passport_device="/dev/$thisdev"
		break
	done

	DEVICE=$passport_device
}


if [ -d "/sys/block" ]
then
	find_passport
fi

if [ $DEVICE = "/dev/sda" -o \
	$DEVICE = "/dev/sdb" -o \
	$DEVICE = "/dev/sdc" -o \
	$DEVICE = "/dev/sdd" -o \
	$DEVICE = "/dev/sde" ]
then
	# use separate virtual console for output
	VCON=3
	exec < /dev/tty$VCON > /dev/tty$VCON 2>/dev/tty$VCON
	chvt $VCON

	echo
	echo "**********************************************************"
	echo 'Starting Teleflora Kickstart $Revision: 1.18 $'
	echo "**********************************************************"
	echo
	echo
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo "!!!!"
	echo "!!!! ERROR! Passport Drive is plugged in as device $DEVICE."
	echo "!!!! Since the assumption is that the passport drive contains"
	echo "!!!! backup data and that data could be destroyed by the"
	echo "!!!! installation, the installation will not proceed."
	echo "!!!!"
	echo "!!!! Please unplug the Western Digital Passport device and"
	echo "!!!! then re-try this kickstart."
	echo "!!!!"
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
	echo
	echo
	echo "Sleeping for 10 seconds... and then rebooting."
	echo
	sleep 10
	reboot
fi
%end
%post 
cd /usr/bin
curl -O http://rhel8repo.centralus.cloudapp.azure.com/ostools-1.17/updateos updateos
chmod +x /usr/bin/updateos
systemctl start sendmail
systemctl start smb
systemctl start cups
systemctl start iptables
systemctl enable sendmail
systemctl enable smb
systemctl enable cups
systemctl enable iptables
systemctl disable firewalld
systemctl stop firewalld
systemctl disable ntpd
systemctl enable ntpdate
systemctl start ntpdate
openvt -s -w -- /usr/bin/updateos stage
%end
